<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Private Chat</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 text-white">
  <div class="flex h-screen">
    <!-- Conversation List (Left Sidebar) -->
    <div class="w-1/4 bg-gray-800 border-r border-gray-700 p-4 overflow-y-auto">
      <!-- User Profile Section -->
      <div class="flex items-center mb-4 pb-3 border-b border-gray-700">
        <div class="w-10 h-10 rounded-full bg-gray-700 mr-3 flex items-center justify-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
          </svg>
        </div>
        <div>
          <h3 class="font-semibold text-white" id="current-username"><%= currentUser.username %></h3>
        </div>
      </div>
      
      <!-- Tabs -->
      <div class="flex border-b border-gray-700 mb-4">
        <div class="w-1/2 py-2 text-center font-medium text-white border-b-2 border-blue-500">Messages</div>
        <div class="w-1/2 py-2 text-center font-medium text-gray-400">Requests</div>
      </div>
      
      <!-- Conversation List -->
      <ul class="space-y-2">
        <!-- Example Conversations -->
        <li class="p-2 cursor-pointer rounded-lg hover:bg-gray-700">
          <div class="flex items-center">
            <div class="w-10 h-10 bg-gray-600 rounded-full mr-3"></div>
            <p class="font-semibold">User 1</p>
          </div>
        </li>
        <li class="p-2 cursor-pointer rounded-lg hover:bg-gray-700">
          <div class="flex items-center">
            <div class="w-10 h-10 bg-gray-600 rounded-full mr-3"></div>
            <p class="font-semibold">User 2</p>
          </div>
        </li>
      </ul>
    </div>

    <!-- Chat Window -->
    <div class="flex-1 flex flex-col bg-gray-900">
      <!-- Chat Messages -->
      <div class="flex-1 p-4 overflow-y-auto">
        <!-- Empty State -->
        <div class="h-full flex flex-col items-center justify-center text-center">
          <div class="w-20 h-20 bg-gray-800 rounded-full flex items-center justify-center mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-white mb-2">Your messages</h3>
          <p class="text-gray-400 mb-6">Send a message to start a chat.</p>
          <!-- Button to Open Modal -->
          <button
            onclick="openModal()"
            class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
          >
            Send Message
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal Overlay and Modal -->
  <div id="modal-overlay" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
    <!-- Modal Content -->
    <div class="bg-gray-800 rounded-lg w-11/12 max-w-md p-6 relative">
      <!-- Close Button (X) -->
      <button
        onclick="closeModal()"
        class="absolute top-3 right-3 text-gray-400 hover:text-white"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
      <!-- Modal Body -->
      <div>
        <!-- Modal Title -->
        <h2 class="text-xl font-semibold text-white mb-4">New message</h2>
        
        <!-- Search Bar -->
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-400 mb-1">To:</label>
          <input
            type="text"
            id="search-input"
            placeholder="Search..."
            class="w-full p-2 bg-gray-700 text-white border border-gray-600 rounded-lg"
          />
        </div>

        <!-- Empty Scrolling Body -->
        <div class="h-64 overflow-y-auto mb-4">
          <!-- Search Results Will Appear Here -->
          <div id="search-results" class="text-gray-400 text-center py-4">
            No account found.
          </div>
        </div>

        <!-- Chat Button -->
        <button
          class="w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
        >
          Chat
        </button>
      </div>
    </div>
  </div>

  <!-- JavaScript for Modal and Search -->
  <script>
    // Function to open the modal
    function openModal() {
      const modalOverlay = document.getElementById("modal-overlay");
      modalOverlay.classList.remove("hidden");
    }

    // Function to close the modal
    function closeModal() {
      const modalOverlay = document.getElementById("modal-overlay");
      modalOverlay.classList.add("hidden");
    }

    // Close modal when clicking outside the modal content
    const modalOverlay = document.getElementById("modal-overlay");
    modalOverlay.addEventListener("click", (event) => {
      if (event.target === modalOverlay) {
        closeModal();
      }
    });

    // Search Functionality
    const searchInput = document.getElementById("search-input");
    const searchResults = document.getElementById("search-results");

    searchInput.addEventListener("input", async (event) => {
      const query = event.target.value.trim();

      if (query.length === 0) {
        searchResults.innerHTML = '<div class="text-gray-400 text-center py-4">No account found.</div>';
        return;
      }

      try {
        const response = await fetch(`/api/search-users?q=${encodeURIComponent(query)}`);

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();

        if (data.length === 0) {
          searchResults.innerHTML = '<div class="text-gray-400 text-center py-4">No account found.</div>';
          return;
        }

        searchResults.innerHTML = data
          .map(
            (user) => `
              <div class="p-2 cursor-pointer rounded-lg hover:bg-gray-700 user-result" data-user-id="${user._id}">
                <div class="flex items-center">
                  <div class="w-10 h-10 bg-gray-600 rounded-full mr-3"></div>
                  <p class="font-semibold">${user.username}</p>
                </div>
              </div>
            `
          )
          .join("");
      } catch (error) {
        console.error("Error searching users:", error);
        searchResults.innerHTML = '<div class="text-gray-400 text-center py-4">Error fetching results.</div>';
      }
    });

    // Handle User Selection
    searchResults.addEventListener("click", async (event) => {
      const userElement = event.target.closest(".user-result");
      if (!userElement) return;

      const userId = userElement.dataset.userId; // Get the selected user's ID
      const currentUserId = "<%= currentUser._id %>"; // Replace with the logged-in user's ID

      try {
        // Create a new thread with the selected user and the current user
        const response = await fetch("/api/create-thread", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ participantIds: [currentUserId, userId] }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        const threadId = data.threadId;

        // Redirect to the chat page with the threadId
        window.location.href = `/chat/${threadId}`;
      } catch (error) {
        console.error("Error creating thread:", error);
        alert("Failed to start a chat. Please try again.");
      }
    });
  </script>
</body>
</html>